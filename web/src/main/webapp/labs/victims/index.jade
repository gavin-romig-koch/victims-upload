doctype html

html(lang="en").chrometwo
    head
        title Embedded Vulnerability Detection
        link(href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css",rel="stylesheet")
        // The overrides needs to come after the application css
        // Need in chrome2.css, look at source of http://handsbox-portal.usersys.redhat.com/pass/chrome_test/
        script(data-main="/webassets/avalon/j/chrometwo",src="/webassets/avalon/j/lib/require.js")
        link(href="/webassets/avalon/s/bootstrap3.overrides.css", rel="stylesheet")
    body.chrometwo
        div#chrometwo
            div#main
                h1 Embedded Vulnerability Detection
                // Content area is required as per instruction from Marc Caron, otherwise box styling not honored
                div.content-area
                    div.row
                        div.col-md-6
                            h2 Upload
                            hr
                            br
                            div.spacer.clearfix
                                | <b>Please select JAR, POM, or Java Class file(s) for analysis<br/><br/></b>
                            form.form-horizontal#upload-form(role="form", enctype="multipart/form-data")
                                div.form-group
                                    label.col-sm-2(for="upload")
                                        | Attachment
                                    div.col-sm-10
                                        input#upload(type="file", multiple="multiple")
                                div.form-group
                                    div.col-sm-12
                                        button#form-submit.btn.btn-default(type="submit").
                                            Submit
                            div.p.help-block
                                | Uploaded data is immediately deleted after analysis

                        div.col-md-6
                            h2 Vulnerability Information
                            hr
                            div.spacer.clearfix
                            div#spinner(hidden)
                                img(src="/webassets/avalon/g/chrome/throbber_dickie_large.gif")
                                div.alert.alert-info
                                    span.icon.icon-info-circle(aria-hidden='true')
                                        | Uploading and analyzing file(s) for vulnerabilities.  Please wait.
                            div#fail-msg.alert.alert-danger(hidden)
                                span.icon.icon-warning(aria-hidden='true')
                                    | Failed to analyze file.
                            div#results


        script(type="text/javascript").
            breadcrumbs = [['Labs', '/labs/'], ['Embedded Vulnerability Detector', '/labs/victims/']];
            chrometwo_require(["analytics/main"], function(analytics) {

                $("head").prepend("<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/webassets/avalon/s/bootstrap3.min.css\" />");

                var tagBody = '(?:[^"\'>]|"[^"]*"|\'[^\']*\')*';

                var tagOrComment = new RegExp(
                    '<(?:'
                    // Comment body.
                    + '!--(?:(?:-*[^->])*--+|-?)'
                    // Special "raw text" elements whose content should be elided.
                    + '|script\\b' + tagBody + '>[\\s\\S]*?</script\\s*'
                    + '|style\\b' + tagBody + '>[\\s\\S]*?</style\\s*'
                    // Regular name
                    + '|/?[a-z]'
                    + tagBody
                    + ')>',
                    'gi');

                function removeTags(html) {
                  var oldHtml;
                  do {
                    oldHtml = html;
                    html = html.replace(tagOrComment, '');
                  } while (html !== oldHtml);
                  return html.replace(/</g, '&lt;');
                }

                $("input").change(function() {
                    for(var i=0; i < this.files.length; i++){
                        var name = this.files[i].name;
                        var ext = name.split('.').pop();
                        if (ext !== "class" && ext !== "jar" && ext !== "xml" && ext !== "ear" && ext !== "war") {
                            alert("Invalid file extension");
                            return false;
                        }
                    }
                });
                $('#form-submit').on('click', function (evt) {
                    evt.preventDefault();
                    analytics.trigger("LabsCompletion");

                    var filename = $("#upload").val();
                    if (filename === "") {
                        alert("Please select a file to upload");
                        return false;
                    }
                    var lastIndex = filename.lastIndexOf("\\");
                    if (lastIndex >= 0) {
                        filename = filename.substring(lastIndex + 1);
                    }
                    var ext = filename.split('.').pop();
                    if (ext !== "class" && ext !== "jar" && ext !== "xml" && ext !== "ear" && ext !== "war") {
                        alert("Invalid file extension");
                        return false;
                    }
                    $("#upload").prop("name", filename);
                    var uploadForm = $("#upload")[0];
                    var formData = new FormData();
                    for (var i = 0; i < uploadForm.files.length; i++) {
                        formData.append(uploadForm.files[i].name, uploadForm.files[i]);
                    }
                    $("#spinner").show();
                    $.ajax({
                        url: 'api/check',
                        type: 'POST',
                        headers: {
                            Accept: "application/json"
                        },
                        success: function(response) {
                            var item = "<ul>"
                            response.forEach(function(entry) {
                                item = item + "<li>"
                                var filename = removeTags(entry.file);
                                item = item + filename + ": "
                                if (entry.vulnerabilities.length > 0) {
                                    entry.vulnerabilities.forEach(function(ventry) {
                                        item = item + "<a href='https://access.redhat.com/security/cve/" + ventry + "'>" + ventry + " </a>"
                                    });
                                    item = item + "</li>"
                                }
                                else {
                                    item = item + "No vulnerabilities detected</li>"
                                }
                            });
                            $("#spinner").hide();
                            $("#results").html(item);
                            $("#success-msg").hide();
                        },
                        error: function (response) {
                            $('#fail-msg').show();
                            $('#spinner').hide();
                        },
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                });
            });