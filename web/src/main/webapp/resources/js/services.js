// Generated by CoffeeScript 1.6.2
(function() {
  define(["angular", "jquery", "underscore", "toastr", 'd3Logic'], function(angular, $, _, toastr, d3Logic) {
    "use strict";    return angular.module("rhphd.services", []).value("version", "0.1").service("sharedProperties", [
      'notificationService', 'accountService', 'machineService', function(notify, accountService, machineService) {
        var service;

        service = {};
        service.accountId = void 0;
        service.accountData = void 0;
        service.accountTree = void 0;
        service.orgId = void 0;
        service.machineId = void 0;
        service.machine = void 0;
        service.uiSelection = void 0;
        service.defaultDashboardMetrics = [
          {
            group: 'mem',
            name: 'free',
            type: "line"
          }, {
            group: 'mem',
            name: 'total',
            type: "line"
          }
        ];
        service.handleRouteParams = function(routeParams) {
          var opts;

          if (routeParams["accountId"] != null) {
            if (!((service.accountId === routeParams['accountId']) && (service.accountData != null))) {
              service.accountId = routeParams['accountId'];
              service.uiSelection = "account";
              accountService.getAccount({
                accountId: service.accountId
              }, function(data) {
                var opts;

                service.accountData = data;
                opts = {
                  accountId: service.accountId,
                  data: service.accountData,
                  groupBy: "account"
                };
                return d3Logic.accountToTree(opts, function(result) {
                  return service.accountTree = result;
                });
              });
            }
          } else {
            notify.error("Unable to load page without an accound id");
          }
          if (routeParams['orgId']) {
            service.uiSelection = "org";
            service.orgId = routeParams['orgId'];
          }
          if (routeParams['machineId']) {
            service.uiSelection = "machine";
            service.machineId = routeParams['machineId'];
          }
          if (service.machineId) {
            opts = {
              machineId: service.machineId
            };
            return machineService.getMachine(opts, function(data) {
              return service.machine = data;
            });
          }
        };
        return service;
      }
    ]).factory('notificationService', [
      '$http', function($http) {
        var service;

        service = {};
        service.error = function(data) {
          return toastr.error(data);
        };
        service.success = function(data) {
          return toastr.success(data);
        };
        return service;
      }
    ]).factory('accountService', [
      '$http', '$location', '$cookies', 'notificationService', function($http, $location, $cookies, notify) {
        var ajaxPrepend, config, onError, service;

        ajaxPrepend = !/.*?(foo\.redhat\.com|localhost|itos).*?/.test($location.$$host) ? "/labs/redhat-console" : "";
        config = {
          withCredentials: true
        };
        onError = function(data, status, headers, config) {
          var theHtml;

          theHtml = "<p>There was a " + status + " accessing " + config.url + "</p>";
          if (_.has(data, 'ERROR')) {
            theHtml += "<br /><p><b>ERROR:</b> " + data.ERROR + " </p>";
            return notify.error(theHtml);
          }
        };
        service = {};
        service.getAccount = function(opts, callback) {
          return $http.get("" + ajaxPrepend + "/api/accounts/" + opts.accountId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.getAccounts = function(callback) {
          return $http.get("" + ajaxPrepend + "/api/accounts", config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.createTestData = function(accountId, callback) {
          if (accountId == null) {
            notify.error("Please enter an account id");
            return;
          }
          return $http.post("" + ajaxPrepend + "/api/admin/accounts/" + accountId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.deleteTestData = function(accountId, callback) {
          if (accountId == null) {
            notify.error("Please enter an account id");
            return;
          }
          return $http["delete"]("" + ajaxPrepend + "/api/admin/accounts/" + accountId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        return service;
      }
    ]).factory('machineService', [
      '$http', '$location', '$cookies', 'notificationService', function($http, $location, $cookies, notify) {
        var ajaxPrepend, config, onError, service;

        ajaxPrepend = !/.*?(foo\.redhat\.com|localhost|itos).*?/.test($location.$$host) ? "/labs/redhat-console" : "";
        config = {
          withCredentials: true
        };
        onError = function(data, status, headers, config) {
          var theHtml;

          theHtml = "<p>There was a " + status + " accessing " + config.url + "</p>";
          if (_.has(data, 'ERROR')) {
            theHtml += "<br /><p><b>ERROR:</b> " + data.ERROR + " </p>";
            return notify.error(theHtml);
          }
        };
        service = {};
        service.getMachine = function(opts, callback) {
          if (opts.machineId == null) {
            notify.error("Please enter a machine uuid");
            return;
          }
          $http.get("" + ajaxPrepend + "/api/machines/" + opts.machineId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.getMachines = function(opts, callback) {
          if (opts.accountId == null) {
            notify.error("Please enter an account id");
            return;
          }
          $http.get("" + ajaxPrepend + "/api/accounts/" + opts.accountId + "/machines", config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.saveMachine = function(opts, callback) {
          if (opts.machineId == null) {
            notify.error("Please enter a machine id");
            return;
          }
          if (opts.accountId == null) {
            notify.error("Please enter an account id");
            return;
          }
          $http.post("" + ajaxPrepend + "/api/accounts/" + opts.accountId + "/machines/" + opts.machineId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        service.deleteMachine = function(opts, callback) {
          if (opts.accountId == null) {
            notify.error("Please enter an account id");
            return;
          }
          if (opts.machineId == null) {
            notify.error("Please enter a machine id");
            return;
          }
          $http["delete"]("" + ajaxPrepend + "/api/accounts/" + opts.accountId + "/machines/" + opts.machineId, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        return service;
      }
    ]).factory('metricService', [
      '$http', '$location', '$cookies', 'notificationService', function($http, $location, $cookies, notify) {
        var ajaxPrepend, onError, service;

        ajaxPrepend = !/.*?(foo\.redhat\.com|localhost|itos).*?/.test($location.$$host) ? "/labs/redhat-console" : "";
        onError = function(data, status, headers, config) {
          var theHtml;

          theHtml = "<p>There was a " + status + " accessing " + config.url + "</p>";
          if (_.has(data, 'ERROR')) {
            theHtml += "<br /><p><b>ERROR:</b> " + data.ERROR + " </p>";
            return notify.error(theHtml);
          }
        };
        service = {};
        service.getMetrics = function(opts, callback) {
          var config, url;

          if (opts.machineId == null) {
            notify.error("Please enter a machine uuid");
            return;
          }
          if (opts.group == null) {
            notify.error("Please enter a metric group");
            return;
          }
          if (opts.name == null) {
            notify.error("Please enter a metric name");
            return;
          }
          config = {};
          config.withCredentials = true;
          if (opts.beginDate) {
            params.beginDate = opts.beginDate;
          }
          if (opts.endDate) {
            params.endDate = opts.endDate;
          }
          if (opts.limit !== void 0) {
            config.params = {};
            config.params.limit = opts.limit;
          }
          url = "" + ajaxPrepend + "/api/machines/" + opts.machineId + "/metrics/" + opts.group + "/" + opts.name;
          $http.get(url, config).success(function(data) {
            return callback(data);
          }).error(onError);
        };
        return service;
      }
    ]);
  });

}).call(this);
