// Generated by CoffeeScript 1.6.2
(function() {
  define(['underscore'], function(_) {
    var d3Logic, uriPrepend, _ref;

    uriPrepend = !/.*?(foo\.redhat\.com|localhost|itos).*?/.test(typeof window !== "undefined" && window !== null ? (_ref = window.location) != null ? _ref.origin : void 0 : void 0) ? "/labs/redhat-console" : "";
    d3Logic = {};
    d3Logic.transformMetricData = function(opts, callback) {
      var d3Stream, stream, value;

      d3Stream = [];
      stream = {
        key: "" + opts.metric.group + ":" + opts.metric.name,
        values: []
      };
      if ((opts.chartType === 'pie') && (opts.max === true) && (opts.limit === 1) && (opts.data.length === 1)) {
        value = opts.data[0];
        d3Stream = [
          {
            key: opts.metric.name,
            y: value.value
          }, {
            key: "total",
            y: value.max
          }
        ];
      } else {
        _.each(opts.data, function(d) {
          return stream.values.push({
            x: d.date,
            y: d.value,
            max: d.max
          });
        });
        d3Stream.push(stream);
      }
      return callback(d3Stream);
    };
    d3Logic.groupAccountByOrg = function(accountData, callback) {
      var groupedData, uniqueOrgs;

      uniqueOrgs = {};
      _.each(accountData, function(m) {
        return _.each(m.orgs, function(o) {
          if (!_.has(uniqueOrgs, o.orgId)) {
            return uniqueOrgs[o.orgId] = o;
          }
        });
      });
      groupedData = {};
      _.each(accountData, function(m) {
        return _.each(m['orgs'], function(o) {
          if (!_.has(groupedData, o.orgId)) {
            groupedData[o.orgId] = [];
          }
          return groupedData[o.orgId].push(m);
        });
      });
      return callback(groupedData);
    };
    d3Logic.accountToTree = function(opts, callback) {
      var accountStream, accountTree, groupBy, orgsMap;

      accountTree = [];
      groupBy = opts.groupBy || "account";
      orgsMap = {};
      _.each(opts.data, function(m) {
        return _.each(m.orgs, function(o) {
          if (!_.has(orgsMap, o.orgId)) {
            return orgsMap[o.orgId] = o;
          }
        });
      });
      accountStream = {
        key: opts.accountId,
        type: 'Account',
        url: "" + uriPrepend + "/#/accounts/" + opts.accountId,
        values: []
      };
      if (groupBy === "account") {
        d3Logic.groupAccountByOrg(opts.data, function(groupedData) {
          return _.forOwn(groupedData, function(machines, orgId) {
            var orgStream;

            orgStream = {
              key: orgsMap[orgId]['orgName'] || orgId,
              type: 'Organization',
              url: "" + uriPrepend + "/#/accounts/" + accountStream.key + "/orgs/" + orgId,
              values: []
            };
            _.each(machines, function(machine) {
              var machineStream;

              machineStream = {
                key: machine['hostname'] || machine['_id'],
                type: 'Machine',
                url: "" + uriPrepend + "/#/accounts/" + accountStream.key + "/orgs/" + orgId + "/machines/" + machine['_id'],
                values: []
              };
              return orgStream.values.push(machineStream);
            });
            return accountStream.values.push(orgStream);
          });
        });
      } else if (groupBy === "machine") {
        _.each(opts.data, function(machine) {
          var machineStream;

          machineStream = {
            key: machine['hostname'] || machine['_id'],
            type: 'Machine',
            url: "" + uriPrepend + "/#/accounts/" + accountStream.key + "/orgs/" + machine.orgId + "/machines/" + machine['_id'],
            values: []
          };
          return accountStream.values.push(machineStream);
        });
      }
      accountTree.push(accountStream);
      return callback(accountTree);
    };
    return d3Logic;
  });

}).call(this);
